/* src/CameraVideo.svelte generated by Svelte v3.23.2 */
import {
	SvelteComponent,
	attr,
	binding_callbacks,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_style
} from "https://jcc2303.github.io/sign-language/web_modules/svelte/internal.js";

import { onMount, createEventDispatcher } from "https://jcc2303.github.io/sign-language/web_modules/svelte.js";

function create_fragment(ctx) {
	let video_1;
	let mounted;
	let dispose;

	return {
		c() {
			video_1 = element("video");
			video_1.playsInline = true;
			attr(video_1, "class", "w-auto h-auto");
			set_style(video_1, "-webkit-transform", "scaleX(-1)");
			set_style(video_1, "transform", "scaleX(-1)");
		},
		m(target, anchor) {
			insert(target, video_1, anchor);
			/*video_1_binding*/ ctx[5](video_1);

			if (!mounted) {
				dispose = listen(video_1, "loadedmetadata", /*loadedmetadata_handler*/ ctx[6]);
				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(video_1);
			/*video_1_binding*/ ctx[5](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { video } = $$props;
	let { mobile = false } = $$props;
	let { VIDEO_WIDTH } = $$props, { VIDEO_HEIGHT } = $$props;

	async function setupCamera() {
		if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
			throw new Error("Browser API navigator.mediaDevices.getUserMedia not available");
		}

		const stream = await navigator.mediaDevices.getUserMedia({
			audio: false,
			video: {
				facingMode: "user",
				// Only setting the video to a specified size in order to accommodate a
				// point cloud, so on mobile devices accept the default size.
				width: mobile ? undefined : VIDEO_WIDTH,
				height: mobile ? undefined : VIDEO_HEIGHT
			}
		});

		$$invalidate(0, video.srcObject = stream, video);
	}

	async function loadVideo() {
		await setupCamera();
		video.play();
	}

	// $: main();
	onMount(async () => {
		await loadVideo();
	});

	function video_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			video = $$value;
			$$invalidate(0, video);
		});
	}

	const loadedmetadata_handler = () => dispatch("loadedmetadata");

	$$self.$set = $$props => {
		if ("video" in $$props) $$invalidate(0, video = $$props.video);
		if ("mobile" in $$props) $$invalidate(2, mobile = $$props.mobile);
		if ("VIDEO_WIDTH" in $$props) $$invalidate(3, VIDEO_WIDTH = $$props.VIDEO_WIDTH);
		if ("VIDEO_HEIGHT" in $$props) $$invalidate(4, VIDEO_HEIGHT = $$props.VIDEO_HEIGHT);
	};

	return [
		video,
		dispatch,
		mobile,
		VIDEO_WIDTH,
		VIDEO_HEIGHT,
		video_1_binding,
		loadedmetadata_handler
	];
}

class CameraVideo extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			video: 0,
			mobile: 2,
			VIDEO_WIDTH: 3,
			VIDEO_HEIGHT: 4
		});
	}
}

export default CameraVideo;