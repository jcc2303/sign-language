/* src/BackendChooser.svelte generated by Svelte v3.23.2 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	select_option,
	space,
	text
} from "https://jcc2303.github.io/sign-language/web_modules/svelte/internal.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (17:10) {#each backends as b}
function create_each_block(ctx) {
	let option;
	let t_value = /*b*/ ctx[5] + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*b*/ ctx[5];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (23:4) {#if renderPointcloud}
function create_if_block(ctx) {
	let li;
	let div;
	let span;
	let t1;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			li = element("li");
			div = element("div");
			span = element("span");
			span.textContent = "renderPointcloud";
			t1 = space();
			input = element("input");
			attr(input, "type", "checkbox");
			input.checked = "checked";
			attr(div, "class", "flex");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, div);
			append(div, span);
			append(div, t1);
			append(div, input);

			if (!mounted) {
				dispose = listen(input, "change", /*change_handler*/ ctx[4]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(li);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div2;
	let ul;
	let li;
	let div0;
	let span;
	let t1;
	let select;
	let select_value_value;
	let t2;
	let t3;
	let div1;
	let each_value = /*backends*/ ctx[3];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	let if_block = /*renderPointcloud*/ ctx[2] && create_if_block(ctx);

	return {
		c() {
			div2 = element("div");
			ul = element("ul");
			li = element("li");
			div0 = element("div");
			span = element("span");
			span.textContent = "backend";
			t1 = space();
			select = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			if (if_block) if_block.c();
			t3 = space();
			div1 = element("div");
			div1.textContent = "Close Controls";
			attr(div0, "class", "flex");
			attr(ul, "class", "h-auto");
			attr(div2, "class", "w-full h-6");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, ul);
			append(ul, li);
			append(li, div0);
			append(div0, span);
			append(div0, t1);
			append(div0, select);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			select_value_value = /*backend*/ ctx[1];
			select_option(select, select_value_value);
			append(ul, t2);
			if (if_block) if_block.m(ul, null);
			append(div2, t3);
			append(div2, div1);
		},
		p(ctx, [dirty]) {
			if (dirty & /*backends*/ 8) {
				each_value = /*backends*/ ctx[3];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*backend*/ 2 && select_value_value !== (select_value_value = /*backend*/ ctx[1])) {
				select_option(select, select_value_value);
			}

			if (/*renderPointcloud*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(ul, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div2);
			destroy_each(each_blocks, detaching);
			if (if_block) if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { backend = "webgl" } = $$props;
	let { renderPointcloud = false } = $$props;
	let { glContainer } = $$props;
	let backends = ["wasm", "webgl", "cpu", "webgpu"];
	const change_handler = render => $$invalidate(0, glContainer.style.display = render ? "inline-block" : "none", glContainer);

	$$self.$set = $$props => {
		if ("backend" in $$props) $$invalidate(1, backend = $$props.backend);
		if ("renderPointcloud" in $$props) $$invalidate(2, renderPointcloud = $$props.renderPointcloud);
		if ("glContainer" in $$props) $$invalidate(0, glContainer = $$props.glContainer);
	};

	return [glContainer, backend, renderPointcloud, backends, change_handler];
}

class BackendChooser extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			backend: 1,
			renderPointcloud: 2,
			glContainer: 0
		});
	}
}

export default BackendChooser;